as.xts(data)
library(tidyquant)
install.packages("tidyquant")
library(tidyquant)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS")
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE")
data<- rbind(data1,data2)
as.xts(data)
str(data)
xtsdata <- xts(data[,-1], order.by= data[,6])
install.packages("lubridate")
install.packages("lubridate")
library(lubridate)
finaldata <- as.Date(data$TIMESTAMP)
View(finaldata)
dataset<- as.Date(dataset$TIMESTAMP)
str(dataset)
dataset$TIMESTAMP<- as.Date(dataset$TIMESTAMP)
dataset$TIMESTAMP <- as.Date(dataset$TIMESTAMP)
dataset$TIMESTAMP <- mutate(as.Date(dataset$TIMESTAMP))
library(tidyverse)
dataset$TIMESTAMP <- mutate(as.Date(dataset$TIMESTAMP))
clean_dataset <- mutate(dataset, TIMESTAMP = as.Date(TIMESTAMP))
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(DATE = as.Date(TIMESTAMP))
library(tidyverse)
library(xts)
library(tidyquant)
library(lubridate)
dataset<- read.csv("C:/Users/DELL/Desktop/Stocks.csv")
library(dygraphs)
library(tidyverse)
library(xts)
library(tidyquant)
library(lubridate)
dataset<- read.csv("C:/Users/DELL/Desktop/Stocks.csv")
View(dataset)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(DATE = as.Date(TIMESTAMP))
View(data1)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(DATE = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data1)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data1)
str(dataset)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(DATE = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data1)
str(data1)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data1)str(data1)
View(data1)
str(data1)
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data2)
data<- rbind(data1,data2)
dygraph(data) +
dyRangeSelector()
finaldata <- as.xts(data)
finaldata <- xts(data[,-1], order.by=data[,1])
finaldata <- xts(data[,-1], order.by=data[,6])
View(finaldata)
library(quantmod)
library(dygraphs)
getSymbols("AAPL")
finaldata <- xts(order.by=data[,6])
View(finaldata)
finaldata <- xts(data[,-1], order.by=data[,6])
library(dygraphs)
library(tidyverse)
library(xts)
library(tidyquant)
library(lubridate)
dataset<- read.csv("C:/Users/DELL/Desktop/Stocks.csv")
# We have to convert TIMESTAMP column to date format
#dataset
#clean_dataset <- mutate(dataset, TIMESTAMP = as.Date(TIMESTAMP))
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data<- rbind(data1,data2)
finaldata <- xts(data[,-1], order.by=data[,6])
View(finaldata)
dygraph(finaldata) +
dyRangeSelector()
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%Y-%m-%d'))
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%Y-%m-%d'))
data<- rbind(data1,data2)
finaldata <- xts(data[,-1], order.by=data[,6])
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(DATE = as.Date(TIMESTAMP,'%Y-%m-%d'))
View(data1)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(DATE = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data1)
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data2)
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(DATE = as.Date(TIMESTAMP,'%d-%m-%Y'))
View(data2)
data<- rbind(data1,data2)
View(data)
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data<- rbind(data1,data2)
finaldata <- xts(data[,-1], order.by=data[,6])
data1 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "63MOONS") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data2 <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>% filter(SYMBOL == "ACE") %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data<- rbind(data1,data2)
finaldata <- xts(data, order.by= TIMESTAMP)
finaldata <- xts(data, order.by= data$TIMESTAMP)
View(finaldata)
finaldata <- xts(data)
library(quantmod)
library(dygraphs)
getSymbols("AAPL")
View(AAPL)
rm(list=ls())      #To remove all variables stored previously
library(Hmisc)
#reading and viewing the data
data <- read.csv("C:/Users/DELL/Desktop/COVID19_line_list_data.csv")
describe(data)
# cleaning of data
data$death_dummy = as.integer(data$death !=0)
#death rate
sum(data$death_dummy)/ nrow(data)
#Checking average age of people who died from the virus
dead = subset(data, death_dummy ==1)
alive =subset(data, death_dummy ==0)
mean(dead$age, na.rm =TRUE)
mean(alive$age, na.rm =TRUE)
#To check with the help of statistics if our analysis is true
t.test(alive$age, dead$age, alternative="two.sided", conf.level = 0.95)
#If p-value is less than 0.05 then or hypothesis is wrong
#In this case p-value almost =0, hence our hypothesis is correct.
#Checking the genderof people who died from the virus
male = subset(data, gender == "male")
female =subset(data, gender == "female")
mean(male$death_dummy, na.rm =TRUE)
mean(female$death_dummy, na.rm =TRUE)
#To check with the help of statistics if our analysis is true
t.test(male$death_dummy, female$death_dummy, alternative="two.sided", conf.level = 0.95)
#If p-value is less than 0.05 then or hypothesis is wrong
#In this case p-value almost = 0, hence our hypothesis is correct.
shiny::runApp('C:/Users/DELL/Downloads/visualization-main/visualization-main')
shiny::runApp()
library(plotly)
labels = c("A1", "A2", "A3", "A4", "A5", "B1", "B2")
parents = c("", "A1", "A2", "A3", "A4", "", "B1")
values = c("11", "12", "13", "14", "15", "20", "30")
fig1 <- plot_ly(
type="treemap",
labels=labels,
parents=parents,
values=values,
marker=list(colorscale='Reds'))
fig1
df1 = read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')
df2 = read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')
fig2 <- plot_ly(
type='treemap',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
domain=list(column=0))
fig2
fig2 <- fig2 %>% add_trace(
type='treemap',
ids=df2$ids,
labels=df2$labels,
parents=df2$parents,
maxdepth=1,
domain=list(column=1))
fig2
fig2 <- fig2 %>% layout(grid=list(columns=2, rows=1))
fig2
fig3<- plot_ly(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
domain=list(column=0))
fig3
runApp()
fig3<- plot_ly(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
domain=list(column=0))
fig3
fig3 <- fig3 %>%
layout(
grid = list(columns =2, rows = 1),
margin = list(l = 0, r = 0, b = 0, t = 0),
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- fig3 %>%
layout(
margin = list(l = 0, r = 0, b = 0, t = 0),
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3<- plot_ly(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents
fig3<- plot_ly(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents)
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3<- plot_ly(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
domain=list(column=0))
fig3
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
)
fig3
fig3 <- fig3 %>%
layout(
extendsunburstcolors = TRUE)
fig3
library(plotly)
d1 <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/coffee-flavors.csv')
d2 <- read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')
fig <- plot_ly()
fig <- fig %>%
add_trace(
ids = d1$ids,
labels = d1$labels,
parents = d1$parents,
type = 'sunburst',
maxdepth = 2,
domain = list(column = 0)
)
fig <- fig %>%
add_trace(
ids = d2$ids,
labels = d2$labels,
parents = d2$parents,
type = 'sunburst',
maxdepth = 3,
domain = list(column = 1)
)
fig <- fig %>%
layout(
grid = list(columns =2, rows = 1),
margin = list(l = 0, r = 0, b = 0, t = 0),
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig
fig3<- plot_ly(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
maxdepth = 3)
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig <- fig %>%
layout(
grid = list(columns =2, rows = 1),
margin = list(l = 0, r = 0, b = 0, t = 0),
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig
fig3 <- fig3 %>%
layout(
grid = list(columns =2, rows = 1),
margin = list(l = 0, r = 0, b = 0, t = 0),
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- plot_ly()
fig3<- fig3 %>%
add_trace(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
maxdepth = 3)
fig3 <- fig3 %>%
layout(
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- plot_ly()
fig3<- fig3 %>%
add_trace(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
maxdepth = 3)
fig3
fig3 <- fig3 %>%
layout(
grid = list(columns =2, rows = 1),
margin = list(l = 0, r = 0, b = 0, t = 0),
sunburstcolorway = c(
"#636efa","#EF553B","#00cc96","#ab63fa","#19d3f3",
"#e763fa", "#FECB52","#FFA15A","#FF6692","#B6E880"
),
extendsunburstcolors = TRUE)
fig3
fig3 <- plot_ly()
fig3<- fig3 %>%
add_trace(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
maxdepth = 3)
fig3
View(mpg)
runApp()
library(plotly)
## Treemaps
labels = c("A1", "A2", "A3", "A4", "A5", "B1", "B2")
parents = c("", "A1", "A2", "A3", "A4", "", "B1")
values = c("11", "12", "13", "14", "15", "20", "30")
fig1 <- plot_ly(
type="treemap",
labels=labels,
parents=parents,
values=values,
marker=list(colorscale='Reds'))
fig1
library(plotly)
## Treemaps
labels = c("A1", "A2", "A3", "A4", "A5", "B1", "B2")
parents = c("", "A1", "A2", "A3", "A4", "", "B1")
values = c("11", "12", "13", "14", "15", "20", "30")
fig1 <- plot_ly(
type="treemap",
labels=labels,
parents=parents,
values=values,
marker=list(colorscale='Reds'))
fig1
df1 = read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/sunburst-coffee-flavors-complete.csv')
df2 = read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')
fig2 <- plot_ly(
type='treemap',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
domain=list(column=0))
fig2 <- fig2 %>% add_trace(
type='treemap',
ids=df2$ids,
labels=df2$labels,
parents=df2$parents,
maxdepth=1,
domain=list(column=1))
fig2 <- fig2 %>% layout(grid=list(columns=2, rows=1))
fig2
fig3 <- plot_ly()
fig3<- fig3 %>%
add_trace(
type='sunburst',
ids=df1$ids,
labels=df1$labels,
parents=df1$parents,
maxdepth = 3)
fig3
shiny::runApp()
library(dygraphs)
library(tidyverse)
library(xts)
library(tidyquant)
library(lubridate)
library(RColorBrewer)
library(plotly)
dataset<- read.csv("C:/Users/DELL/Desktop/Stocks.csv")
# We have to convert TIMESTAMP column to date format
data_large <- dataset %>% select(SYMBOL, OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>%
filter(SYMBOL %in% SYMBOL[1:1000]) %>% mutate(TIMESTAMP = as.Date(TIMESTAMP,'%d-%m-%Y'))
data_large_corr <- data_large %>% select(OPEN, HIGH, LOW, CLOSE, TIMESTAMP) %>%
group_by(TIMESTAMP) %>% mutate(OPEN = mean(OPEN), HIGH = mean(HIGH), LOW = mean(LOW), CLOSE = mean(CLOSE) ) %>% distinct()
data_large_df <- as.data.frame(data_large_corr)
#Converting our dataset to xts
finaldata<- xts(data_large_df[,1:4], order.by = data_large_df[,5])
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyOptions(colors = brewer.pal(8,"Paired")) %>%
dyRangeSelector()
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyOptions(colors = brewer.pal(8,"Dark2"), drawGrid = FALSE) %>%
dyRangeSelector()
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyHighlight(highlightCircleSize = 1,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = TRUE) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyOptions(colors = brewer.pal(8,"Set1"), mobileDisableYTouch = TRUE, axisLineWidth = 3) %>%
dyRangeSelector(fillColor = '#984EA3')
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyHighlight(highlightCircleSize = 1,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = TRUE) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyOptions(colors = brewer.pal(8,"Set2"), mobileDisableYTouch = TRUE, axisLineWidth = 3) %>%
dyRangeSelector(fillColor = '#FC8D62')
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyHighlight(highlightCircleSize = 1,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = TRUE) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyOptions(colors = brewer.pal(8,"Dark2"), mobileDisableYTouch = TRUE, axisLineWidth = 3) %>%
dyRangeSelector(fillColor = '#E7298A')
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyHighlight(highlightCircleSize = 1,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = TRUE) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyOptions(colors = c('#1F78B4','#33A02C','#FF7F00','#E31A1C'), mobileDisableYTouch = TRUE, axisLineWidth = 3) %>%
dyRangeSelector(fillColor = '#E31A1C')
dygraph(finaldata, main = "Stock Prices",ylab ="Price",xlab = "Date") %>%
dyHighlight(highlightCircleSize = 1,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = TRUE) %>%
dyAxis("x", drawGrid = FALSE) %>%
dyOptions(colors = c('#ffea4d','#248aff','#24ffba','#E26D5C'), mobileDisableYTouch = TRUE, axisLineWidth = 3) %>%
dyRangeSelector(fillColor = '#E26D5C')
dygraph(finaldata, main = "Stock Prices") %>%
dyHighlight(highlightCircleSize = 1,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = TRUE) %>%
dyAxis("x", label = "Date", drawGrid = FALSE) %>%
dyAxis("y", label = "Price") %>%
dyOptions(colors = c('#FFBC42','#1F78B4','#D81159','#33A02C'), strokeWidth = 1,mobileDisableYTouch = TRUE, axisLineWidth = 3) %>%
dyRangeSelector(fillColor = '#33A02C')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
